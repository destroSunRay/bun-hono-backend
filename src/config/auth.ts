import { betterAuth, BetterAuthOptions } from "better-auth";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { organization, openAPI } from "better-auth/plugins";

import { db } from "@/db";
import config from "./env";
import { EmailService } from "@/services/email.service";
import * as schema from "@/db/schema";
import { createPersonalOrganization } from "@/utils/auth/createPersonalOrganization";

const user: BetterAuthOptions["user"] = {
  additionalFields: {
    timezone: {
      type: "string",
      defaultValue: "EST",
    },
    locale: {
      type: "string",
      defaultValue: "en-US",
    },
    currency: {
      type: "string",
      defaultValue: "USD",
    },
    subscriptionTier: {
      type: "string",
      defaultValue: "free",
    },
    preferences: {
      type: "json", // JSON string
      defaultValue: () =>
        JSON.stringify({
          theme: "system",
          notifications: {
            email: true,
            push: true,
            budgetAlerts: true,
            goalReminders: true,
          },
          privacy: {
            profileVisibility: "private",
            transactionVisibility: "private",
          },
        }),
    },
  },
} as BetterAuthOptions["user"];

export const auth = betterAuth({
  database: drizzleAdapter(db, {
    provider: "pg",
    schema,
  }),
  secret: config.BETTER_AUTH_SECRET,
  trustedOrigins: config.CORS_ORIGIN,
  plugins: [
    organization({
      allowUserToCreateOrganization: true,
      organizationCreation: {
        disabled: false,
        // afterCreate: async ({ organization, user }) => {
        //   console.log(`Organization created: ${organization.name}`);

        //   // Only create default categories for manually created organizations
        //   // Personal organizations are handled in email verification
        //   if (!organization.metadata?.autoGenerated) {
        //     await createDefaultCategories(organization.id, user.id);
        //   }
        // },
      },
      sendInvitationEmail: async (data) => {
        const inviteLink = `${config.APPLICATION_URL}/accept-invitation/${data.id}`;
        await EmailService.sendOrganizationInvitation({
          email: data.email,
          invitedByUsername: data.inviter.user.name || data.inviter.user.email,
          invitedByEmail: data.inviter.user.email,
          teamName: data.organization.name,
          inviteLink,
        });
      },
    }),
    openAPI(),
  ],
  emailAndPassword: {
    enabled: true,
    requireEmailVerification: true,
    sendResetPassword: async (data) => {
      const resetUrl = `${config.APPLICATION_URL}/reset-password/${data.token}`;
      await EmailService.sendPasswordResetEmail(data.user.email, resetUrl);
    },
  },
  emailVerification: {
    sendVerificationEmail: async (data) => {
      const verificationUrl = `${config.APPLICATION_URL}/verify-email/${data.token}`;
      await EmailService.sendVerificationEmail(
        data.user.email,
        verificationUrl
      );
    },
    expiresIn: 60 * 60 * 24, // 24 hours
    // Create personal organization and default categories after email verification
    onEmailVerification: async (user) => {
      console.log(
        `email verified from onEmailVerification: ${user.id} - ${user.email} - ${user.name}`
      );
      try {
        await createPersonalOrganization(user.id, user.email, user.name);
      } catch (error) {
        console.error(
          "Failed to create personal organization after email verification:",
          error
        );
        // Don't throw error to avoid breaking the verification flow
      }
    },
  },

  socialProviders: {
    google: {
      clientId: config.GOOGLE_CLIENT_ID,
      clientSecret: config.GOOGLE_CLIENT_SECRET,
    },
    github: {
      clientId: config.GITHUB_CLIENT_ID,
      clientSecret: config.GITHUB_CLIENT_SECRET,
    },
  },

  session: {
    expiresIn: 60 * 60 * 24 * 7, // 7 days
    updateAge: 60 * 60 * 24, // 24 hours
  },

  account: {
    accountLinking: {
      enabled: true,
      trustedProviders: ["google", "github", "email-password"],
    },
  },

  user,
  databaseHooks: {
    user: {
      create: {
        after: async (user) => {
          console.log(
            `User created: ${user.id} - ${user.email} - ${user.name}`
          );
          if (user.emailVerified) {
            console.log(
              `email verified from databaseHooks: ${user.id} - ${user.email} - ${user.name}`
            );
            // Automatically create personal organization and default categories
            // await createPersonalOrganization(
            //   user.id,
            //   user.email,
            //   user.name
            // ).catch((error: unknown) => {
            //   console.error(
            //     "Failed to create personal organization after user creation:",
            //     error
            //   );
            // });
          }
        },
      },
    },
  },
});

export default auth;
