import { db } from "@/db";
import * as schema from "@/db/schema";
import { eq } from "drizzle-orm";

/**
 * Creates a personal organization for the user with the same ID
 */
export const createPersonalOrganization = async (
  userId: string,
  userEmail: string,
  userName?: string
): Promise<void> => {
  try {
    console.log(`Creating personal organization for user: ${userId}`);

    // Check if organization already exists
    const existingOrg = await db.query.organization.findFirst({
      where: (orgs, { eq }) => eq(orgs.id, userId),
    });

    if (existingOrg) {
      if (
        existingOrg.metadata &&
        JSON.parse(existingOrg.metadata)?.createdBy === userId
      ) {
        return;
      }
      console.log(`Organization already exists for user: ${userId}`);
      // Handle case where organization already exists
      await db
        .update(schema.organization)
        .set({ id: crypto.randomUUID() })
        .where(eq(schema.organization.id, userId));
    }

    // Create organization with same ID as user
    await db.insert(schema.organization).values({
      id: userId,
      name: `${userName || userEmail.split("@")[0]}'s Finances`,
      slug: `${
        userName?.toLowerCase().replace(/\s+/g, "-") || userEmail.split("@")[0]
      }-finances`,
      metadata: JSON.stringify({
        type: "personal",
        createdBy: userId,
        autoGenerated: true,
      }),
      createdAt: new Date(),
    });

    // Create member relationship
    await db.insert(schema.member).values({
      id: crypto.randomUUID(),
      organizationId: userId,
      userId: userId,
      role: "owner",
      createdAt: new Date(),
    });

    console.log(`Successfully created personal organization: ${userId}`);

    // Create default categories for the user
    // await createDefaultCategories(userId, userId);
  } catch (error) {
    console.error(
      `Error creating personal organization for user ${userId}:`,
      error
    );
    throw error;
  }
};
